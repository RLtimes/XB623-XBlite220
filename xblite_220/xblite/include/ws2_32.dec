' ####################  XBLite
' #####  ws2_32  #####  copyright 2003
' ####################  XBLite declaration file for Windows "ws2_32"

' subject to GPLL license - see gpll.txt
' for Windows XBasic/XBLite

' VERSION  "0.0003"  ' 2004/04/27

' ###########################
' #####  declare types  #####
' ###########################

TYPE SOCKET	 = ULONG
TYPE CSTRING  = XLONG
TYPE IN_ADDR = XLONG

TYPE FD_SET
  XLONG        .fd_count	' how many are set  
  XLONG        .fd_array[63]	' up to 64 sockets  
END TYPE

TYPE TIMEVAL
  XLONG    .tv_sec
  XLONG    .tv_usec
END TYPE

TYPE HOSTENT
  ULONG       .h_name       ' char *h_name  
  ULONG       .h_aliases    ' char **h_aliases  
  SSHORT      .h_addrtype   ' host address type  
  SSHORT      .h_length     ' length of address  
  ULONG       .h_addr_list  ' addr of list of addresses from name server  
END TYPE

TYPE NETENT
  XLONG       .n_name      ' official name of net  
  XLONG       .n_aliases   ' alias list  
  SSHORT      .n_addrtype  ' net address type  
  XLONG       .n_net       ' network  
END TYPE

TYPE SERVENT
  XLONG       .s_name      ' official service name  
  XLONG       .s_aliases   ' alias list  
  SSHORT      .s_port      ' port number  
  XLONG       .s_proto     ' protocol number  
END TYPE

TYPE PROTOENT
  XLONG  .p_name           ' official protocol name  
  XLONG  .p_aliases        ' alias list  
  SSHORT .p_proto          ' protocol number  
END TYPE

TYPE S_un_b
  UBYTE  .s_b1
  UBYTE  .s_b2
  UBYTE  .s_b3
  UBYTE  .s_b4
END TYPE

TYPE S_un_w
  USHORT  .s_w1
  USHORT  .s_w2
END TYPE

TYPE S_un
UNION
  S_un_b  .sunb
  S_un_w  .sunw
  ULONG  .S_addr
END UNION
END TYPE

TYPE SOCKADDR_IN
  SSHORT    .sin_family
  USHORT    .sin_port
  IN_ADDR   .sin_addr
  UBYTE     .sin_zero[7]
END TYPE

TYPE WSADATA
  USHORT     .wVersion
  USHORT     .wHighVersion
  STRING*257 .szDescription
  STRING*129 .szSystemStatus
  USHORT     .iMaxSockets
  USHORT     .iMaxUdpDg
  XLONG      .lpVendorInfo
END TYPE

TYPE SOCKADDR
  USHORT .sa_family
  UBYTE  .sa_data[13]
END TYPE

TYPE SOCKPROTO
  USHORT .sp_family    ' address family  
  USHORT .sp_protocol  ' protocol  
END TYPE

TYPE LINGER
  USHORT .l_onoff
  USHORT .l_linger
END TYPE

TYPE WSABUF
  ULONG  .dLen     ' the length of the buffer  
  ULONG  .buf      ' the pointer to the buffer  
END TYPE

TYPE FLOWSPEC
  ULONG   .TokenRate         ' In Bytes/sec  
  ULONG   .TokenBucketSize   ' In Bytes  
  ULONG   .PeakBandwidth     ' In Bytes/sec  
  ULONG   .Latency           ' In microseconds  
  ULONG   .DelayVariation    ' In microseconds  
  ULONG   .ServiceType
  ULONG   .MaxSduSize        ' In Bytes  
  ULONG   .MinimumPolicedSize   ' In Bytes  
END TYPE

TYPE QOS_OBJECT_HDR
  ULONG  .ObjectType
  ULONG  .ObjectLength   ' the length of object buffer INCLUDING this header  
END TYPE

TYPE QOS_SD_MODE
  QOS_OBJECT_HDR  .ObjectHdr
  ULONG  .ShapeDiscardMode
END TYPE

TYPE QOS_SHAPING_RATE
  QOS_OBJECT_HDR  .ObjectHdr
  ULONG  .ShapingRate
END TYPE

TYPE QOS
  FLOWSPEC   .SendingFlowspec   ' the flow spec for data sending  
  FLOWSPEC  .ReceivingFlowspec   ' the flow spec for data receiving  
  WSABUF    .ProviderSpecific   ' additional provider-specific stuff  
END TYPE

TYPE WSANETWORKEVENTS
  ULONG  .lNetworkEvents
  ULONG  .iErrorCode[9]
END TYPE

TYPE GUIDAPI2
  ULONG  .Data1
  USHORT  .Data2
  USHORT  .Data3
  STRING * 8  .Data4
END TYPE

TYPE WSAPROTOCOLCHAIN
  ULONG  .ChainLen          ' the length of the chain [=0, layered protocol; =1, base protocol; >1, protocol chain]  
  ULONG  .ChainEntries[6]   ' a list of dwCatalogEntryIds  
END TYPE

TYPE WSAPROTOCOL_INFO
  ULONG  .dwServiceFlags1
  ULONG  .dwServiceFlags2
  ULONG  .dwServiceFlags3
  ULONG  .dwServiceFlags4
  ULONG  .dwProviderFlags
  GUIDAPI2  .ProviderId
  ULONG  .dwCatalogEntryId
  WSAPROTOCOLCHAIN  .ProtocolChain
  ULONG  .iVersion
  ULONG  .iAddressFamily
  ULONG  .iMaxSockAddr
  ULONG  .iMinSockAddr
  ULONG  .iSocketType
  ULONG  .iProtocol
  ULONG  .iProtocolMaxOffset
  ULONG  .iNetworkByteOrder
  ULONG  .iSecurityScheme
  ULONG  .dwMessageSize
  ULONG  .dwProviderReserved
  STRING * 256  .szProtocol
END TYPE

' Manifest constants and type definitions related to name resolution and
' registration [RNR] API

TYPE BLOB
  ULONG  .cbSize
  ULONG  .pBlobData
END TYPE

' SockAddr Information

TYPE SOCKET_ADDRESS
  ULONG  .lpSocaddr
  ULONG  .iSockaddrLength
END TYPE

' CSAddr Information

TYPE CSADDR_INFO
  SOCKET_ADDRESS  .LocalAddr
  SOCKET_ADDRESS  .RemoteAddr
  ULONG  .iSocketType
  ULONG  .iProtocol
END TYPE

' Address list returned via SIO_ADDRESS_LIST_QUERY

TYPE SOCKET_ADDRESS_LIST
  ULONG  .iAddressCount
  SOCKET_ADDRESS  .Address[0]
END TYPE

' Address Family/Protocol Tuples

TYPE AFPROTOCOLS
  ULONG  .iAddressFamily
  ULONG  .iProtocol
END TYPE

' Client Query API Typedefs

TYPE WSAVersion
  ULONG  .dwVersion
  ULONG  .ecHow
END TYPE

TYPE WSAQUERYSET
  ULONG  .dwSize
  ULONG  .lpszServiceInstanceName 
  ULONG  .lpServiceClassId
  ULONG  .lpVersion 
  ULONG  .lpszComment
  ULONG  .dwNameSpace
  ULONG  .lpNSProviderId
  ULONG  .lpszContext
  ULONG  .dwNumberOfProtocols
  ULONG  .lpafpProtocols
  ULONG  .lpszQueryString 
  ULONG  .dwNumberOfCsAddrs
  ULONG  .lpcsaBuffer
  ULONG  .dwOutputFlags
  ULONG  .lpBlob 
END TYPE

TYPE WSANSCLASSINFO
  ULONG  .lpszName
  ULONG  .dwNameSpace
  ULONG  .dwValueType
  ULONG  .dwValueSize
  ULONG  .lpValue
END TYPE

TYPE WSASERVICECLASSINFO
  ULONG  .lpServiceClassId
  ULONG  .lpszServiceClassName
  ULONG  .dwCount
  ULONG  .lpClassInfos
END TYPE

TYPE WSANAMESPACE_INFO
  GUIDAPI2  .NSProviderId
  ULONG  .dwNameSpace
  ULONG  .fActive
  ULONG  .dwVersion
  ULONG  .lpszIdentifier
END TYPE

' ###############################
' #####  declare functions  #####
' ###############################

EXTERNAL CFUNCTION WSAAccept (s, sa, addrlen, lpfnCondition, dwCallbackData)
EXTERNAL CFUNCTION WSAAddressToStringA (lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength)
EXTERNAL CFUNCTION WSAAsyncGetHostByAddr (hWnd, wMsg, address, addr_len, addr_type, buf, buflen)
EXTERNAL CFUNCTION WSAAsyncGetHostByName (hWnd, wMsg, host_name, buf, buflen)
EXTERNAL CFUNCTION WSAAsyncGetProtoByName (hWnd, wMsg, proto_name, buf, buflen)
EXTERNAL CFUNCTION WSAAsyncGetProtoByNumber (hWnd, wMsg, number, buf, buflen)
EXTERNAL CFUNCTION WSAAsyncGetServByName (hWnd, wMsg, serv_name, proto, buf, buflen)
EXTERNAL CFUNCTION WSAAsyncGetServByPort (hWnd, wMsg, lPort, proto, buf, buflen)
EXTERNAL CFUNCTION WSAAsyncSelect (s, hWnd, wMsg, lEvent)
EXTERNAL CFUNCTION WSACancelAsyncRequest (hAsyncTaskHandle)
EXTERNAL CFUNCTION WSACancelBlockingCall ()
EXTERNAL CFUNCTION WSACleanup ()
EXTERNAL CFUNCTION WSACloseEvent (h)
EXTERNAL CFUNCTION WSAConnect (s, sname, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS)
EXTERNAL CFUNCTION WSACreateEvent ()
EXTERNAL CFUNCTION WSADuplicateSocketA (s, dwProcessId, lpProtocolInfo)
EXTERNAL CFUNCTION WSAEnumNameSpaceProvidersA (lpdwBufferLength, lpnspBuffer)
EXTERNAL CFUNCTION WSAEnumNetworkEvents (s, hEventObject, lpNetworkEvents)
EXTERNAL CFUNCTION WSAEnumProtocolsA (lpiProtocols, lpProtocolBuffer, lpdwBufferLength)
EXTERNAL CFUNCTION WSAEventSelect (s, hEventObject, lNetworkEvents)
EXTERNAL CFUNCTION WSAGetLastError ()
EXTERNAL CFUNCTION WSAGetOverlappedResult (s, lpOverlapped, lpcbTransfer, fWait, lpdwFlags)
EXTERNAL CFUNCTION WSAGetQOSByName (s, lpQOSName, lpQOS)
EXTERNAL CFUNCTION WSAGetServiceClassInfoA (lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo)
EXTERNAL CFUNCTION WSAGetServiceClassNameByClassIdA (lpServiceClassId, lpszServiceClassName, lpdwBufferLength)
EXTERNAL CFUNCTION WSAHtonl (s, hostlong, lpnetlong)
EXTERNAL CFUNCTION WSAHtons (s, hostshort, lpnetshort)
EXTERNAL CFUNCTION WSAInstallServiceClassA (lpServiceClassInfo)
EXTERNAL CFUNCTION WSAIoctl (s, dwIoControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped, lpCompletionRoutine)
EXTERNAL CFUNCTION WSAIsBlocking ()
EXTERNAL CFUNCTION WSAJoinLeaf (s, sname, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS, dwFlags)
EXTERNAL CFUNCTION WSALookupServiceBeginA (lpqsRestrictions, dwControlFlags, lphLookup)
EXTERNAL CFUNCTION WSALookupServiceEnd (hLookup)
EXTERNAL CFUNCTION WSALookupServiceNextA (hLookup, dwControlFlags, lpdwBufferLength, lpsqResults)
EXTERNAL CFUNCTION WSANtohl (s, netlong, lphostlong)
EXTERNAL CFUNCTION WSANtohs (s, netshort, lphostshort)
EXTERNAL CFUNCTION WSAProviderConfigChange (lpNotificationHandle, lpOverlapped, lpCompletionRoutine)
EXTERNAL CFUNCTION WSARecv (s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped, lpCompletionRoutine)
EXTERNAL CFUNCTION WSARecvDisconnect (s, lpInboundDisconnectData)
EXTERNAL CFUNCTION WSARecvFrom (s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpFrom, lpFromlen, lpOverlapped, lpCompletionRoutine)
EXTERNAL CFUNCTION WSARemoveServiceClass (lpServiceClassId)
EXTERNAL CFUNCTION WSAResetEvent (hEvent)
EXTERNAL CFUNCTION WSASend (s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpOverlapped, lpCompletionRoutine)
EXTERNAL CFUNCTION WSASendDisconnect (s, lpOutboundDisconnectData)
EXTERNAL CFUNCTION WSASendTo (s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo, iTolen, lpOverlapped, lpCompletionRoutine)
EXTERNAL CFUNCTION WSASetBlockingHook (lpBlockFunc)
EXTERNAL CFUNCTION WSASetEvent (hEvent)
EXTERNAL CFUNCTION WSASetLastError (iError)
EXTERNAL CFUNCTION WSASetServiceA (lpqsRegInfo, essoperation, dwControlFlags)
EXTERNAL CFUNCTION WSASocketA (af, ltype, protocol, lpProtocolInfo, g, dwFlags)
EXTERNAL CFUNCTION WSAStartup (wVR, lpWSAD)
EXTERNAL CFUNCTION WSAStringToAddressA (AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength)
EXTERNAL CFUNCTION WSAUnhookBlockingHook ()
EXTERNAL CFUNCTION WSAWaitForMultipleEvents (cEvents, lphEvents, fWaitAll, dwTimeout, fAlertable)

EXTERNAL CFUNCTION accept (s, saAddr, addrlen)
EXTERNAL CFUNCTION bind (s, sname, namelen)
EXTERNAL CFUNCTION closesocket (s)
EXTERNAL CFUNCTION connect (s, sname, namelen)
EXTERNAL CFUNCTION gethostbyaddr (sa, addr_len, addr_type)
EXTERNAL CFUNCTION gethostbyname (hname)
EXTERNAL CFUNCTION gethostname (host_name, namelen)
EXTERNAL CFUNCTION getpeername (s, sname, namelen)
EXTERNAL CFUNCTION getprotobyname (proto_name)
EXTERNAL CFUNCTION getprotobynumber (proto)
EXTERNAL CFUNCTION getservbyname (serv_name, proto)
EXTERNAL CFUNCTION getservbyport (lPort, proto)
EXTERNAL CFUNCTION getsockname (s, sname, namelen)
EXTERNAL CFUNCTION getsockopt (s, level, optname, optval, optlen)
EXTERNAL CFUNCTION htonl (hostlong)
EXTERNAL CFUNCTION htons (hostshort)
EXTERNAL CFUNCTION inet_addr (cp)
EXTERNAL CFUNCTION inet_ntoa (inn)
EXTERNAL CFUNCTION ioctlsocket (s, cmd, argp)
EXTERNAL CFUNCTION listen (s, backlog)
EXTERNAL CFUNCTION ntohl (netlong)
EXTERNAL CFUNCTION ntohs (netshort)
EXTERNAL CFUNCTION recv (s, buf, buflen, flags)
EXTERNAL CFUNCTION recvfrom (s, buf, buflen, flags, saFrom, fromlen)
EXTERNAL CFUNCTION select (nfds, readfdsAddr, writefdsAddr, exceptfdsstrucAddr, timeoutAddr)
EXTERNAL CFUNCTION send (s, buf, buflen, flags)
EXTERNAL CFUNCTION sendto (s, buf, buflen, flags, to_addr, tolen)
EXTERNAL CFUNCTION setsockopt (s, level, optname, optval, optlen)
EXTERNAL CFUNCTION shutdown (s, how)
EXTERNAL CFUNCTION socket (af, s_type, protocol)

' ###############################
' #####  declare constants  #####
' ###############################

$$WINSOCK_VERSION = 0x0202

$$FD_SETSIZE = 64

$$IOCPARM_MASK = 0x7F         ' parameters must be < 128 bytes
$$IOC_VOID     = 0x20000000   ' no parameters
$$IOC_OUT      = 0x40000000   ' copy out parameters
$$IOC_IN       = 0x80000000   ' copy in parameters
$$IOC_INOUT    = 0xC0000000   '$$IOC_IN OR $$IOC_OUT ' 20000000 distinguishes new & old ioctl's

$$FIONREAD   = 0x4004667F
$$FIONBIO    = 0x8004667E
$$FIOASYNC   = 0x8004667D

' Socket I/O Controls
$$SIOCSHIWAT  = 0x80047300  ' set high watermark
$$SIOCGHIWAT  = 0x40047301  ' get high watermark
$$SIOCSLOWAT  = 0x80047302  ' set low watermark
$$SIOCGLOWAT  = 0x40047303  ' get low watermark
$$SIOCATMARK  = 0x40047307  ' at oob mark?

' Constants and structures defined by the internet system, 
' Per RFC 790,  September 1981.

' Protocols

$$IPPROTO_IP  = 0  ' dummy for IP
$$IPPROTO_ICMP = 1  ' control message protocol
$$IPPROTO_IGMP = 2  ' internet group management protocol
$$IPPROTO_GGP = 3  ' gateway^2 (deprecated)
$$IPPROTO_TCP = 6  ' tcp
$$IPPROTO_PUP = 12  ' pup
$$IPPROTO_UDP = 17  ' user datagram protocol
$$IPPROTO_IDP = 22  ' xns idp
$$IPPROTO_ND  = 77  ' UNOFFICIAL net disk proto

$$IPPROTO_RAW = 255 ' raw IP packet
$$IPPROTO_MAX = 256


' Port/socket numbers: network standard functions

$$IPPORT_ECHO    = 7
$$IPPORT_DISCARD  = 9
$$IPPORT_SYSTAT   = 11
$$IPPORT_DAYTIME  = 13
$$IPPORT_NETSTAT  = 15
$$IPPORT_FTP    = 21
$$IPPORT_TELNET   = 23
$$IPPORT_SMTP    = 25
$$IPPORT_TIMESERVER = 37
$$IPPORT_NAMESERVER = 42
$$IPPORT_WHOIS   = 43
$$IPPORT_MTP    = 57

' Port/socket numbers: host specific functions

$$IPPORT_TFTP  = 69
$$IPPORT_RJE   = 77
$$IPPORT_FINGER = 79
$$IPPORT_TTYLINK = 87
$$IPPORT_SUPDUP = 95

' UNIX TCP sockets

$$IPPORT_EXECSERVER = 512
$$IPPORT_LOGINSERVER = 513
$$IPPORT_CMDSERVER  = 514
$$IPPORT_EFSSERVER  = 520

' UNIX UDP sockets

$$IPPORT_BIFFUDP   = 512
$$IPPORT_WHOSERVER  = 513
$$IPPORT_ROUTESERVER = 520
' 520+1 also used

' Ports < IPPORT_RESERVED are reserved for privileged processes (e.g. root).

$$IPPORT_RESERVED  = 1024

' Link numbers

$$IMPLINK_IP    = 155
$$IMPLINK_LOWEXPER = 156
$$IMPLINK_HIGHEXPER = 158

$$IN_CLASSA_NET  = 0xFF000000
$$IN_CLASSA_NSHIFT = 24
$$IN_CLASSA_HOST  = 0x00FFFFFF
$$IN_CLASSA_MAX  = 128

$$IN_CLASSB_NET  = 0xFFFF0000
$$IN_CLASSB_NSHIFT = 16
$$IN_CLASSB_HOST  = 0x0000FFFF
$$IN_CLASSB_MAX  = 65536

$$IN_CLASSC_NET  = 0xFFFFFF00
$$IN_CLASSC_NSHIFT = 8
$$IN_CLASSC_HOST  = 0x000000FF

$$IN_CLASSD_NET  = 0xF0000000   ' These ones aren't really
$$IN_CLASSD_NSHIFT = 28       ' net and host fields,  but
$$IN_CLASSD_HOST  = 0x0FFFFFFF   ' routing needn't know.

$$INADDR_ANY    = 0x00000000
$$INADDR_LOOPBACK = 0x7F000001
$$INADDR_BROADCAST = 0xFFFFFFFF
$$INADDR_NONE   = 0xFFFFFFFF

$$ADDR_ANY     = $$INADDR_ANY

$$WSADESCRIPTION_LEN = 256
$$WSASYS_STATUS_LEN = 128

' Definitions related to sockets: types,  address families,  options.

$$INVALID_SOCKET = 0xFFFFFFFF
$$SOCKET_ERROR  = -1

' The following may be used in place of the address family,  socket type,  or
' protocol in a call to WSASocket to indicate that the corresponding value
' should be taken from the supplied WSAPROTOCOL_INFO structure instead of the
' parameter itself.

$$FROM_PROTOCOL_INFO = -1

' Socket Types
'
$$SOCK_STREAM  = 1  ' stream socket
$$SOCK_DGRAM   = 2  ' datagram socket
$$SOCK_RAW    = 3  ' raw-protocol interface
$$SOCK_RDM    = 4  ' reliably-delivered message
$$SOCK_SEQPACKET = 5  ' sequenced packet stream

' Option flags per-socket.

$$SO_DEBUG    = 0x0001  ' turn on debugging info recording
$$SO_ACCEPTCONN = 0x0002  ' socket has had listen()
$$SO_REUSEADDR  = 0x0004  ' allow local address reuse
$$SO_KEEPALIVE  = 0x0008  ' keep connections alive
$$SO_DONTROUTE  = 0x0010  ' just use interface addresses
$$SO_BROADCAST  = 0x0020  ' permit sending of broadcast msgs
$$SO_USELOOPBACK = 0x0040  ' bypass hardware when possible
$$SO_LINGER   = 0x0080  ' linger on close if data present
$$SO_OOBINLINE  = 0x0100  ' leave received OOB data in line

$$SO_DONTLINGER    = 0xFFFFFF7F  ' CLNG(NOT SO_LINGER)
$$SO_EXCLUSIVEADDRUSE = 0xFFFFFFFB  ' CLNG(NOT S0_REUSEADDR) disallow local address reuse

' Additional options.

$$SO_SNDBUF   = 0x1001  ' send buffer size
$$SO_RCVBUF   = 0x1002  ' receive buffer size
$$SO_SNDLOWAT  = 0x1003  ' send low-water mark
$$SO_RCVLOWAT  = 0x1004  ' receive low-water mark
$$SO_SNDTIMEO  = 0x1005  ' send timeout
$$SO_RCVTIMEO  = 0x1006  ' receive timeout
$$SO_ERROR    = 0x1007  ' get error status and clear
$$SO_TYPE    = 0x1008  ' get socket type

' WinSock 2 extension -- new options

$$SO_GROUP_ID    = 0x2001   ' ID of a socket group
$$SO_GROUP_PRIORITY = 0x2002   ' the relative priority within a group
$$SO_MAX_MSG_SIZE  = 0x2003   ' maximum message size
$$SO_PROTOCOL_INFO = 0x2004   ' WSAPROTOCOL_INFO structure
$$PVD_CONFIG    = 0x3001   ' configuration info for service provider
$$SO_CONDITIONAL_ACCEPT = 0x3002 ' enable true conditional accept:

$$TCP_NODELAY = 0x0001

$$AF_UNSPEC  = 0     ' unspecified
'
' Although AF_UNSPEC is defined for backwards compatibility,  using
' AF_UNSPEC for the "af" parameter when creating a socket is STRONGLY
' DISCOURAGED. The interpretation of the "protocol" parameter
' depends on the actual address family chosen. As environments grow
' to include more and more address families that use overlapping
' protocol values there is more and more chance of choosing an
' undesired address family when AF_UNSPEC is used.
'
$$AF_UNIX   = 1     ' local to host (pipes,  portals)
$$AF_INET   = 2     ' internetwork: UDP,  TCP,  etc.
$$AF_IMPLINK  = 3     ' arpanet imp addresses
$$AF_PUP    = 4     ' pup protocols: e.g. BSP
$$AF_CHAOS   = 5     ' mit CHAOS protocols
$$AF_NS    = 6     ' XEROX NS protocols
$$AF_IPX    = 6     ' IPX and SPX
$$AF_ISO    = 7     ' ISO protocols
$$AF_OSI    = 7     ' OSI is ISO
$$AF_ECMA   = 8     ' european computer manufacturers
$$AF_DATAKIT  = 9     ' datakit protocols
$$AF_CCITT   = 10    ' CCITT protocols,  X.25 etc
$$AF_SNA    = 11    ' IBM SNA
$$AF_DECnet  = 12    ' DECnet
$$AF_DLI    = 13    ' Direct data link interface
$$AF_LAT    = 14    ' LAT
$$AF_HYLINK  = 15    ' NSC Hyperchannel
$$AF_APPLETALK = 16    ' AppleTalk
$$AF_NETBIOS  = 17    ' NetBios-style addresses
$$AF_VOICEVIEW = 18    ' VoiceView
$$AF_FIREFOX  = 19    ' Protocols from Firefox
$$AF_UNKNOWN1 = 20    ' Somebody is using this!
$$AF_BAN    = 21    ' Banyan
$$AF_ATM    = 22    ' Native ATM Services
$$AF_INET6   = 23    ' Internetwork Version 6
$$AF_CLUSTER  = 24    ' Microsoft Wolfpack
$$AF_12844   = 25    ' IEEE 1284.4 WG AF
$$AF_IRDA   = 26    ' IrDA
$$AF_NETDES  = 28    ' Network Designers OSI & gateway enabled protocols

$$AF_MAX    = 29

' Protocol families,  same as address families for now.

$$PF_UNSPEC  = $$AF_UNSPEC
$$PF_UNIX   = $$AF_UNIX
$$PF_INET   = $$AF_INET
$$PF_IMPLINK  = $$AF_IMPLINK
$$PF_PUP    = $$AF_PUP
$$PF_CHAOS   = $$AF_CHAOS
$$PF_NS    = $$AF_NS
$$PF_IPX    = $$AF_IPX
$$PF_ISO    = $$AF_ISO
$$PF_OSI    = $$AF_OSI
$$PF_ECMA   = $$AF_ECMA
$$PF_DATAKIT  = $$AF_DATAKIT
$$PF_CCITT   = $$AF_CCITT
$$PF_SNA    = $$AF_SNA
$$PF_DECnet  = $$AF_DECnet
$$PF_DLI    = $$AF_DLI
$$PF_LAT    = $$AF_LAT
$$PF_HYLINK  = $$AF_HYLINK
$$PF_APPLETALK = $$AF_APPLETALK
$$PF_VOICEVIEW = $$AF_VOICEVIEW
$$PF_FIREFOX  = $$AF_FIREFOX
$$PF_UNKNOWN1 = $$AF_UNKNOWN1
$$PF_BAN    = $$AF_BAN
$$PF_ATM    = $$AF_ATM
$$PF_INET6   = $$AF_INET6

$$PF_MAX    = $$AF_MAX

' Level number for (get/set)sockopt() to apply to socket itself.
'
$$SOL_SOCKET = 0x0000FFFF ' options for socket level

' Maximum queue length specifiable by listen.
'
$$SOMAXCONN = 0x7FFFFFFF

$$MSG_OOB    = 0x1   ' process out-of-band data
$$MSG_PEEK   = 0x2   ' peek at incoming message
$$MSG_DONTROUTE = 0x4   ' send without using routing tables

$$MSG_PARTIAL  = 0x8000  ' partial send or recv for message xport

' WinSock 2 extension -- new flags for WSASend(), WSASendTo(), WSARecv() and WSARecvFrom()

$$MSG_INTERRUPT = 0x10  ' send/recv in the interrupt context
$$MSG_MAXIOVLEN = 16

' Define constant based on rfc883,  used by gethostbyxxxx() calls.

$$MAXGETHOSTSTRUCT = 1024

' WinSock 2 extension -- bit values and indices for FD_XXX network events

$$FD_READ_BIT  = 0
$$FD_READ    = 1

$$FD_WRITE_BIT  = 1
$$FD_WRITE    = 2

$$FD_OOB_BIT   = 2
$$FD_OOB     = 4

$$FD_ACCEPT_BIT = 3
$$FD_ACCEPT   = 8

$$FD_CONNECT_BIT = 4
$$FD_CONNECT   = 16

$$FD_CLOSE_BIT  = 5
$$FD_CLOSE    = 32

$$FD_QOS_BIT   = 6
$$FD_QOS     = 64

$$FD_GROUP_QOS_BIT = 7
$$FD_GROUP_QOS  = 128

$$FD_ROUTING_INTERFACE_CHANGE_BIT = 8
$$FD_ROUTING_INTERFACE_CHANGE = 256

$$FD_ADDRESS_LIST_CHANGE_BIT = 9
$$FD_ADDRESS_LIST_CHANGE = 512

$$FD_MAX_EVENTS = 10
$$FD_ALL_EVENTS = 1023

' All Windows Sockets error constants are biased by WSABASEERR from
' the "normal"

$$WSABASEERR       = 10000

' Windows Sockets definitions of regular Microsoft C error constants

$$WSAEINTR        = 10004
$$WSAEBADF        = 10009
$$WSAEACCES       = 10013
$$WSAEFAULT       = 10014
$$WSAEINVAL       = 10022
$$WSAEMFILE       = 10024

' Windows Sockets definitions of regular Berkeley error constants

$$WSAEWOULDBLOCK     = 10035
$$WSAEINPROGRESS     = 10036
$$WSAEALREADY      = 10037
$$WSAENOTSOCK      = 10038
$$WSAEDESTADDRREQ    = 10039
$$WSAEMSGSIZE      = 10040
$$WSAEPROTOTYPE     = 10041
$$WSAENOPROTOOPT     = 10042
$$WSAEPROTONOSUPPORT   = 10043
$$WSAESOCKTNOSUPPORT   = 10044
$$WSAEOPNOTSUPP     = 10045
$$WSAEPFNOSUPPORT    = 10046
$$WSAEAFNOSUPPORT    = 10047
$$WSAEADDRINUSE     = 10048
$$WSAEADDRNOTAVAIL    = 10049
$$WSAENETDOWN      = 10050
$$WSAENETUNREACH     = 10051
$$WSAENETRESET      = 10052
$$WSAECONNABORTED    = 10053
$$WSAECONNRESET     = 10054
$$WSAENOBUFS       = 10055
$$WSAEISCONN       = 10056
$$WSAENOTCONN      = 10057
$$WSAESHUTDOWN      = 10058
$$WSAETOOMANYREFS    = 10059
$$WSAETIMEDOUT      = 10060
$$WSAECONNREFUSED    = 10061
$$WSAELOOP        = 10062
$$WSAENAMETOOLONG    = 10063
$$WSAEHOSTDOWN      = 10064
$$WSAEHOSTUNREACH    = 10065
$$WSAENOTEMPTY      = 10066
$$WSAEPROCLIM      = 10067
$$WSAEUSERS       = 10068
$$WSAEDQUOT       = 10069
$$WSAESTALE       = 10070
$$WSAEREMOTE       = 10071

' Extended Windows Sockets error constant definitions

$$WSASYSNOTREADY     = 10091
$$WSAVERNOTSUPPORTED   = 10092
$$WSANOTINITIALISED   = 10093
$$WSAEDISCON       = 10101
$$WSAENOMORE       = 10102
$$WSAECANCELLED     = 10103
$$WSAEINVALIDPROCTABLE  = 10104
$$WSAEINVALIDPROVIDER  = 10105
$$WSAEPROVIDERFAILEDINIT = 10106
$$WSASYSCALLFAILURE   = 10107
$$WSASERVICE_NOT_FOUND  = 10108
$$WSATYPE_NOT_FOUND   = 10109
$$WSA_E_NO_MORE     = 10110
$$WSA_E_CANCELLED    = 10111
$$WSAEREFUSED      = 10112

' Error return codes from gethostbyname() and gethostbyaddr()
' (when using the resolver). Note that these errors are
' retrieved via WSAGetLastError() and must therefore follow
' the rules for avoiding clashes with error numbers from
' specific implementations or language run-time systems.
' For this reason the codes are based at $$WSABASEERR+1001.
' Note also that $$[WSA]NO_ADDRESS is defined only for
' compatibility purposes.

$$WSAHOST_NOT_FOUND   = 11001 ' Authoritative Answer: Host not found
$$WSATRY_AGAIN      = 11002 ' Non-Authoritative: Host not found,  or SERVERFAIL
$$WSANO_RECOVERY     = 11003 ' Non-recoverable errors,  FORMERR,  REFUSED,  NOTIMP
$$WSANO_DATA       = 11004 ' Valid name,  no data record of requested type
'
' Define QOS related error return codes
'
' at least one Reserve has arrived
$$WSA_QOS_RECEIVERS        = 11005 ' at least one Path has arrived
$$WSA_QOS_SENDERS         = 11006 ' there are no senders
$$WSA_QOS_NO_SENDERS       = 11007 ' there are no receivers
$$WSA_QOS_NO_RECEIVERS      = 11008 ' Reserve has been confirmed
$$WSA_QOS_REQUEST_CONFIRMED    = 11009 ' error due to lack of resources
$$WSA_QOS_ADMISSION_FAILURE    = 11010 ' rejected for administrative reasons - bad credentials
$$WSA_QOS_POLICY_FAILURE     = 11011 ' unknown or conflicting style
$$WSA_QOS_BAD_STYLE        = 11012 ' problem with some part of the filterspec or provider specific buffer in general
$$WSA_QOS_BAD_OBJECT       = 11013 ' problem with some part of the flowspec
$$WSA_QOS_TRAFFIC_CTRL_ERROR   = 11014 ' general error
$$WSA_QOS_GENERIC_ERROR      = 11015 ' invalid service type in flowspec
$$WSA_QOS_ESERVICETYPE      = 11016 ' invalid flowspec
$$WSA_QOS_EFLOWSPEC        = 11017 ' invalid provider specific buffer
$$WSA_QOS_EPROVSPECBUF      = 11018 ' invalid filter style
$$WSA_QOS_EFILTERSTYLE      = 11019 ' invalid filter type
$$WSA_QOS_EFILTERTYPE       = 11020 ' incorrect number of filters
$$WSA_QOS_EFILTERCOUNT      = 11021 ' invalid object length
$$WSA_QOS_EOBJLENGTH       = 11022 ' incorrect number of flows
$$WSA_QOS_EFLOWCOUNT       = 11023 ' unknown object in provider specific buffer
$$WSA_QOS_EUNKOWNPSOBJ      = 11024 ' invalid policy object in provider specific buffer
$$WSA_QOS_EPOLICYOBJ       = 11025 ' invalid flow descriptor in the list
$$WSA_QOS_EFLOWDESC        = 11026 ' inconsistent flow spec in provider specific buffer
$$WSA_QOS_EPSFLOWSPEC       = 11027 ' invalid filter spec in provider specific buffer
$$WSA_QOS_EPSFILTERSPEC      = 11028 ' invalid shape discard mode object in provider specific buffer
$$WSA_QOS_ESDMODEOBJ       = 11029 ' invalid shaping rate object in provider specific buffer
$$WSA_QOS_ESHAPERATEOBJ      = 11030 ' reserved policy element in provider specific buffer
$$WSA_QOS_RESERVED_PETYPE     = 11031

' Compatibility macros.

$$HOST_NOT_FOUND = $$WSAHOST_NOT_FOUND
$$TRY_AGAIN   = $$WSATRY_AGAIN
$$NO_RECOVERY  = $$WSANO_RECOVERY
$$NO_DATA    = $$WSANO_DATA
$$WSANO_ADDRESS = $$WSANO_DATA    ' no address,  look for MX record
$$NO_ADDRESS   = $$WSANO_ADDRESS
'
' Windows Sockets errors redefined as regular Berkeley error constants.
'
$$EWOULDBLOCK   = $$WSAEWOULDBLOCK
$$EINPROGRESS   = $$WSAEINPROGRESS
$$EALREADY    = $$WSAEALREADY
$$ENOTSOCK    = $$WSAENOTSOCK
$$EDESTADDRREQ  = $$WSAEDESTADDRREQ
$$EMSGSIZE    = $$WSAEMSGSIZE
$$EPROTOTYPE   = $$WSAEPROTOTYPE
$$ENOPROTOOPT   = $$WSAENOPROTOOPT
$$EPROTONOSUPPORT = $$WSAEPROTONOSUPPORT
$$ESOCKTNOSUPPORT = $$WSAESOCKTNOSUPPORT
$$EOPNOTSUPP   = $$WSAEOPNOTSUPP
$$EPFNOSUPPORT  = $$WSAEPFNOSUPPORT
$$EAFNOSUPPORT  = $$WSAEAFNOSUPPORT
$$EADDRINUSE   = $$WSAEADDRINUSE
$$EADDRNOTAVAIL  = $$WSAEADDRNOTAVAIL
$$ENETDOWN    = $$WSAENETDOWN
$$ENETUNREACH   = $$WSAENETUNREACH
$$ENETRESET    = $$WSAENETRESET
$$ECONNABORTED  = $$WSAECONNABORTED
$$ECONNRESET   = $$WSAECONNRESET
$$ENOBUFS     = $$WSAENOBUFS
$$EISCONN     = $$WSAEISCONN
$$ENOTCONN    = $$WSAENOTCONN
$$ESHUTDOWN    = $$WSAESHUTDOWN
$$ETOOMANYREFS  = $$WSAETOOMANYREFS
$$ETIMEDOUT    = $$WSAETIMEDOUT
$$ECONNREFUSED  = $$WSAECONNREFUSED
$$ELOOP      = $$WSAELOOP
$$ENAMETOOLONG  = $$WSAENAMETOOLONG
$$EHOSTDOWN    = $$WSAEHOSTDOWN
$$EHOSTUNREACH  = $$WSAEHOSTUNREACH
$$ENOTEMPTY    = $$WSAENOTEMPTY
$$EPROCLIM    = $$WSAEPROCLIM
$$EUSERS     = $$WSAEUSERS
$$EDQUOT     = $$WSAEDQUOT
$$ESTALE     = $$WSAESTALE
$$EREMOTE     = $$WSAEREMOTE


$$WSA_IO_PENDING     = 997
$$WSA_IO_INCOMPLETE   = 996
$$WSA_INVALID_HANDLE   = 6
$$WSA_INVALID_PARAMETER = 87
$$WSA_NOT_ENOUGH_MEMORY = 8
$$WSA_OPERATION_ABORTED = 995

$$WSA_INVALID_EVENT   = 0
$$WSA_MAXIMUM_WAIT_EVENTS= 64
$$WSA_WAIT_FAILED    = 0xFFFFFFFF
$$WSA_WAIT_EVENT_0    = 0x00000000
$$WSA_WAIT_IO_COMPLETION = 0x000000C0
$$WSA_WAIT_TIMEOUT    = 258
$$WSA_INFINITE      = 0xFFFFFFFF

$$MAX_PROTOCOL_CHAIN = 7
$$BASE_PROTOCOL   = 1
$$LAYERED_PROTOCOL  = 0

' Definitions for valued-based Service Type for each direction of data flow.

$$SERVICETYPE_NOTRAFFIC      = 0x00000000 ' No data in this direction
$$SERVICETYPE_BESTEFFORT     = 0x00000001 ' Best Effort
$$SERVICETYPE_CONTROLLEDLOAD   = 0x00000002 ' Controlled Load
$$SERVICETYPE_GUARANTEED     = 0x00000003 ' Guaranteed
$$SERVICETYPE_NETWORK_UNAVAILABLE = 0x00000004 ' Used to notify change to user
$$SERVICETYPE_GENERAL_INFORMATION = 0x00000005 ' corresponds to "General Parameters" defined by IntServ
$$SERVICETYPE_NOCHANGE      = 0x00000006 ' used to indicate that the flow spec contains no change from any previous one
$$SERVICETYPE_NONCONFORMING    = 0x00000009 ' Non-Conforming Traffic
$$SERVICETYPE_NETWORK_CONTROL   = 0x0000000A ' Network Control traffic
$$SERVICETYPE_QUALITATIVE     = 0x0000000D ' Qualitative applications

' Definitions for bitmap-based Service Type for each direction of data flow.

$$SERVICE_BESTEFFORT       = 0x80010000
$$SERVICE_CONTROLLEDLOAD     = 0x80020000
$$SERVICE_GUARANTEED       = 0x80040000
$$SERVICE_QUALITATIVE       = 0x80200000


' Flags to control the usage of RSVP on this flow.

' to turn off traffic control,  'OR' this flag with the
' ServiceType field in the FLOWSPEC

$$SERVICE_NO_TRAFFIC_CONTROL = 0x81000000


' this flag can be used to prevent any rsvp signaling messages from being
' sent. Local traffic control will be invoked,  but no RSVP Path messages
' will be sent.This flag can also be used in conjunction with a receiving
' flowspec to suppress the automatic generation of a Reserve message.
' The application would receive notification that a Path message had arrived
' and would then need to alter the QOS by issuing WSAIoctl($$SIO_SET_QOS), 
' to unset this flag and thereby causing Reserve messages to go out.

$$SERVICE_NO_QOS_SIGNALING  = 0x40000000

' this value can be used in the FLOWSPEC structure to instruct the Rsvp Service
' provider to derive the appropriate default value for the parameter. Note
' that not all values in the FLOWSPEC structure can be defaults. In the
' ReceivingFlowspec,  all parameters can be defaulted except the ServiceType.
' In the SendingFlowspec,  the MaxSduSize and MinimumPolicedSize can be
' defaulted. Other defaults may be possible. Refer to the appropriate
' documentation.

$$QOS_NOT_SPECIFIED = 0xFFFFFFFF

' define a value that can be used for the PeakBandwidth,  which will map into
' positive infinity when the FLOWSPEC is converted into IntServ floating point
' format. We can't use (-1) because that value was previously defined to mean
' "select the default".

$$POSITIVE_INFINITY_RATE = 0xFFFFFFFE

' the provider specific structure can have a number of objects in it.
' Each next structure in the
' ProviderSpecific will be the QOS_OBJECT_HDR struct that prefaces the actual
' data with a type and length for that object. This QOS_OBJECT struct can
' repeat several times if there are several objects. This list of objects
' terminates either when the buffer length has been reached ( WSABUF ) or
' an object of type QOS_END_OF_LIST is encountered.

' general QOS objects start at this offset from the base and have a range
' of 1000

$$QOS_GENERAL_ID_BASE = 2000

$$QOS_OBJECT_END_OF_LIST = 2001   ' QOS_End_of_list structure passed
$$QOS_OBJECT_SD_MODE = 2002     ' QOS_ShapeDiscard structure passed
$$QOS_OBJECT_SHAPING_RATE = 2003   ' QOS_ShapingRate structure
$$QOS_OBJECT_DESTADDR = 2004     ' QOS_Dest structure (defined in qossp.h)

' This structure is used to define the behaviour that the traffic
' control packet shaper will apply to the flow.
'
' $$TC_NONCONF_BORROW - the flow will receive resources remaining
' after all higher priority flows have been serviced. If a
' TokenRate is specified,  packets may be non-conforming and
' will be demoted to less than best-effort priority.
'
' $$TC_NONCONF_SHAPE - TokenRate must be specified. Non-conforming
' packets will be retianed in the packet shaper until they become
' conforming.
'
' $$TC_NONCONF_DISCARD - TokenRate must be specified. Non-conforming
' packets will be discarded.

$$TC_NONCONF_BORROW   = 0
$$TC_NONCONF_SHAPE    = 1
$$TC_NONCONF_DISCARD   = 2
$$TC_NONCONF_BORROW_PLUS = 3

' WinSock 2 extension -- manifest constants for return values of the condition function

$$CF_ACCEPT = 0x0000
$$CF_REJECT = 0x0001
$$CF_DEFER = 0x0002

' WinSock 2 extension -- manifest constants for shutdown()

$$SD_RECEIVE = 0x00
$$SD_SEND  = 0x01
$$SD_BOTH  = 0x02

' WinSock 2 extension -- data type and manifest constants for socket groups

$$SG_UNCONSTRAINED_GROUP = 0x01
$$SG_CONSTRAINED_GROUP  = 0x02

$$WSAPROTOCOL_LEN = 255

' Flag bit definitions for dwProviderFlags
$$PFL_MULTIPLE_PROTO_ENTRIES = 0x00000001
$$PFL_RECOMMENDED_PROTO_ENTRY = 0x00000002
$$PFL_HIDDEN         = 0x00000004
$$PFL_MATCHES_PROTOCOL_ZERO  = 0x00000008

' Flag bit definitions for dwServiceFlags1
$$XP1_CONNECTIONLESS      = 0x00000001
$$XP1_GUARANTEED_DELIVERY   = 0x00000002
$$XP1_GUARANTEED_ORDER     = 0x00000004
$$XP1_MESSAGE_ORIENTED     = 0x00000008
$$XP1_PSEUDO_STREAM      = 0x00000010
$$XP1_GRACEFUL_CLOSE      = 0x00000020
$$XP1_EXPEDITED_DATA      = 0x00000040
$$XP1_CONNECT_DATA       = 0x00000080
$$XP1_DISCONNECT_DATA     = 0x00000100
$$XP1_SUPPORT_BROADCAST    = 0x00000200
$$XP1_SUPPORT_MULTIPOINT    = 0x00000400
$$XP1_MULTIPOINT_CONTROL_PLANE = 0x00000800
$$XP1_MULTIPOINT_DATA_PLANE  = 0x00001000
$$XP1_QOS_SUPPORTED      = 0x00002000
$$XP1_INTERRUPT        = 0x00004000
$$XP1_UNI_SEND         = 0x00008000
$$XP1_UNI_RECV         = 0x00010000
$$XP1_IFS_HANDLES       = 0x00020000
$$XP1_PARTIAL_MESSAGE     = 0x00040000

$$BIGENDIAN  = 0x0000
$$LITTLEENDIAN = 0x0001

$$SECURITY_PROTOCOL_NONE = 0x0000

' WinSock 2 extension -- manifest constants for WSAJoinLeaf()

$$JL_SENDER_ONLY  = 0x01
$$JL_RECEIVER_ONLY = 0x02
$$JL_BOTH     = 0x04

' WinSock 2 extension -- manifest constants for WSASocket()

$$WSA_FLAG_OVERLAPPED    = 0x01
$$WSA_FLAG_MULTIPOINT_C_ROOT = 0x02
$$WSA_FLAG_MULTIPOINT_C_LEAF = 0x04
$$WSA_FLAG_MULTIPOINT_D_ROOT = 0x08
$$WSA_FLAG_MULTIPOINT_D_LEAF = 0x10

' WinSock 2 extension -- manifest constants for WSAIoctl()

$$IOC_UNIX   = 0x00000000
$$IOC_WS2   = 0x08000000
$$IOC_PROTOCOL = 0x10000000
$$IOC_VENDOR  = 0x18000000

$$SIO_ASSOCIATE_HANDLE        = 0x88000001
$$SIO_ENABLE_CIRCULAR_QUEUEING    = 0x28000002
$$SIO_FIND_ROUTE           = 0x48000003
$$SIO_FLUSH             = 0x28000004
$$SIO_GET_BROADCAST_ADDRESS     = 0x48000005
$$SIO_GET_EXTENSION_FUNCTION_POINTER = 0xC8000006
$$SIO_GET_QOS            = 0xC8000007
$$SIO_GET_GROUP_QOS         = 0xC8000008
$$SIO_MULTIPOINT_LOOPBACK      = 0x88000009
$$SIO_MULTICAST_SCOPE        = 0x8800000A
$$SIO_SET_QOS            = 0x8800000B
$$SIO_SET_GROUP_QOS         = 0x8800000C
$$SIO_TRANSLATE_HANDLE        = 0xC800000D
$$SIO_ROUTING_INTERFACE_QUERY    = 0xC8000014
$$SIO_ROUTING_INTERFACE_CHANGE    = 0x88000015
$$SIO_ADDRESS_LIST_QUERY       = 0x48000016
$$SIO_ADDRESS_LIST_CHANGE      = 0x28000017
$$SIO_QUERY_TARGET_PNP_HANDLE    = 0x48000018

' WinSock 2 extension -- manifest constants for SIO_TRANSLATE_HANDLE ioctl

$$TH_NETDEV = 0x00000001
$$TH_TAPI  = 0x00000002

' Service Install Flags

$$SERVICE_MULTIPLE    = 0x00000001

' & Name Spaces

$$NS_ALL     = 0

$$NS_SAP     = 1
$$NS_NDS     = 2
$$NS_PEER_BROWSE = 3
$$NS_SLP     = 5
$$NS_DHCP    = 6

$$NS_TCPIP_LOCAL = 10
$$NS_TCPIP_HOSTS = 11
$$NS_DNS     = 12
$$NS_NETBT    = 13
$$NS_WINS    = 14

$$NS_NBP     = 20

$$NS_MS     = 30
$$NS_STDA    = 31
$$NS_NTDS    = 32

$$NS_X500    = 40
$$NS_NIS     = 41
$$NS_NISPLUS   = 42

$$NS_WRQ     = 50

$$NS_NETDES   = 60  ' Network Designers Limited


' Resolution flags for WSAGetessByName().
' Note these are also used by the 1.1 API GetessByName,  so
' leave them around.

$$RES_UNUSED_1  = 0x00000001
$$RES_FLUSH_CACHE = 0x00000002
$$RES_SERVICE   = 0x00000004

' Well known value names for Service Types

$$SERVICE_TYPE_VALUE_IPXPORT = "IpxSocket"
$$SERVICE_TYPE_VALUE_SAPID  = "SapId"
$$SERVICE_TYPE_VALUE_TCPPORT = "TcpPort"
$$SERVICE_TYPE_VALUE_UDPPORT = "UdpPort"
$$SERVICE_TYPE_VALUE_OBJECTID = "ObjectId"

$$LUP_DEEP        = 0x0001
$$LUP_CONTAINERS     = 0x0002
$$LUP_NOCONTAINERS    = 0x0004
$$LUP_NEAREST       = 0x0008
$$LUP_RETURN_NAME     = 0x0010
$$LUP_RETURN_TYPE     = 0x0020
$$LUP_RETURN_VERSION   = 0x0040
$$LUP_RETURN_COMMENT   = 0x0080
$$LUP_RETURN_ADDR     = 0x0100
$$LUP_RETURN_BLOB     = 0x0200
$$LUP_RETURN_ALIASES  = 0x0400 
$$LUP_RETURN_QUERY_STRING = 0x0800
$$LUP_RETURN_ALL     = 0x0FF0
$$LUP_RES_SERVICE     = 0x8000

$$LUP_FLUSHCACHE     = 0x1000
$$LUP_FLUSHPREVIOUS    = 0x2000

' Return flags

$$RESULT_IS_ALIAS  = 0x0001 

' Service ess Registration and Deregistration Data Types.

$$RNRSERVICE_REGISTER = 0
$$RNRSERVICE_DEREGISTER = 1
$$RNRSERVICE_DELETE = 2

' The comparators

$$COMP_EQUAL  = 0
$$COMP_NOTLESS = 1


















